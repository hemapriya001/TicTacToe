package week;

import java.util.Random;
import java.util.Scanner;

public class TicTacToe {
    private static char[][] board;
    private static final int BOARD_SIZE = 3;
    private static final char EMPTY_CELL = ' ';
    private static final char PLAYER_X = 'X';
    private static final char PLAYER_O = 'O';

    private static Scanner scanner = new Scanner(System.in);
    private static Random random = new Random();

    public static void main(String[] args) {
        board = new char[BOARD_SIZE][BOARD_SIZE];
        initBoard();

        HumanPlayer humanPlayer = new HumanPlayer("Player X", PLAYER_X);
        AIPlayer aiPlayer = new AIPlayer("AI", PLAYER_O);

        Player currentPlayer = humanPlayer;

        while (!isGameOver()) {
            currentPlayer.makeMove();
            disBoard();
            if (currentPlayer == humanPlayer)
                currentPlayer = aiPlayer;
            else
                currentPlayer = humanPlayer;
        }

        if (checkWinner(PLAYER_X))
            System.out.println("Player X wins!");
        else if (checkWinner(PLAYER_O))
            System.out.println("Player O wins!");
        else
            System.out.println("It's a draw!");
    }

    private static void initBoard() {
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                board[i][j] = EMPTY_CELL;
            }
        }
    }

    private static void disBoard() {
        System.out.println("-------------");
        for (int i = 0; i < BOARD_SIZE; i++) {
            System.out.print("| ");
            for (int j = 0; j < BOARD_SIZE; j++) {
                System.out.print(board[i][j] + " | ");
            }
            System.out.println();
            System.out.println("-------------");
        }
    }

    private static boolean isGameOver() {
        return checkWinner(PLAYER_X) || checkWinner(PLAYER_O) || isBoardFull();
    }

    private static boolean isBoardFull() {
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                if (board[i][j] == EMPTY_CELL)
                    return false;
            }
        }
        return true;
    }

    private static boolean checkWinner(char player) {
        for (int i = 0; i < BOARD_SIZE; i++) {
            if (board[i][0] == player && board[i][1] == player && board[i][2] == player)
                return true;
            if (board[0][i] == player && board[1][i] == player && board[2][i] == player)
                return true;
        }
        if (board[0][0] == player && board[1][1] == player && board[2][2] == player)
            return true;
        if (board[0][2] == player && board[1][1] == player && board[2][0] == player)
            return true;
        return false;
    }

    private static class Player {
        String name;
        char mark;

        Player(String name, char mark) {
            this.name = name;
            this.mark = mark;
        }

        void makeMove() {
            // To be overridden by subclasses
        }
    }

    private static class HumanPlayer extends Player {
        HumanPlayer(String name, char mark) {
            super(name, mark);
        }

        void makeMove() {
            int row, col;
            do {
                System.out.println(name + ", enter row (0-2) and column (0-2) separated by space:");
                row = readInput();
                col = readInput();
            } while (!isValidMove(row, col));
            placeMark(row, col, mark);
        }

        private int readInput() {
            while (!scanner.hasNextInt()) {
                System.out.println("Invalid input! Please enter a number.");
                scanner.next();
            }
            return scanner.nextInt();
        }

        private boolean isValidMove(int row, int col) {
            if (row < 0 || row >= BOARD_SIZE || col < 0 || col >= BOARD_SIZE) {
                System.out.println("Invalid move! Row and column must be between 0 and 2.");
                return false;
            }
            if (board[row][col] != EMPTY_CELL) {
                System.out.println("Invalid move! Cell is already occupied.");
                return false;
            }
            return true;
        }

        private void placeMark(int row, int col, char mark) {
            board[row][col] = mark;
        }
    }

    private static class AIPlayer extends Player {
        AIPlayer(String name, char mark) {
            super(name, mark);
        }

        void makeMove() {
            int row, col;
            do {
                row = random.nextInt(BOARD_SIZE);
                col = random.nextInt(BOARD_SIZE);
            } while (!isValidMove(row, col));
            placeMark(row, col, mark);
        }

        private boolean isValidMove(int row, int col) {
            return board[row][col] == EMPTY_CELL;
        }

        private void placeMark(int row, int col, char mark) {
            board[row][col] = mark;
        }
    }
}
